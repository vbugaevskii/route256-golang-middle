// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	loms "route256/checkout/internal/clients/loms"

	mock "github.com/stretchr/testify/mock"
)

// LomsClient is an autogenerated mock type for the LomsClient type
type LomsClient struct {
	mock.Mock
}

type LomsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *LomsClient) EXPECT() *LomsClient_Expecter {
	return &LomsClient_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function with given fields: ctx, user, items
func (_m *LomsClient) CreateOrder(ctx context.Context, user int64, items []loms.RequestCreateOrderItem) (loms.ResponseCreateOrder, error) {
	ret := _m.Called(ctx, user, items)

	var r0 loms.ResponseCreateOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []loms.RequestCreateOrderItem) (loms.ResponseCreateOrder, error)); ok {
		return rf(ctx, user, items)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, []loms.RequestCreateOrderItem) loms.ResponseCreateOrder); ok {
		r0 = rf(ctx, user, items)
	} else {
		r0 = ret.Get(0).(loms.ResponseCreateOrder)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, []loms.RequestCreateOrderItem) error); ok {
		r1 = rf(ctx, user, items)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LomsClient_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type LomsClient_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - user int64
//   - items []loms.RequestCreateOrderItem
func (_e *LomsClient_Expecter) CreateOrder(ctx interface{}, user interface{}, items interface{}) *LomsClient_CreateOrder_Call {
	return &LomsClient_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, user, items)}
}

func (_c *LomsClient_CreateOrder_Call) Run(run func(ctx context.Context, user int64, items []loms.RequestCreateOrderItem)) *LomsClient_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]loms.RequestCreateOrderItem))
	})
	return _c
}

func (_c *LomsClient_CreateOrder_Call) Return(_a0 loms.ResponseCreateOrder, _a1 error) *LomsClient_CreateOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LomsClient_CreateOrder_Call) RunAndReturn(run func(context.Context, int64, []loms.RequestCreateOrderItem) (loms.ResponseCreateOrder, error)) *LomsClient_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// Stocks provides a mock function with given fields: ctx, sku
func (_m *LomsClient) Stocks(ctx context.Context, sku uint32) (loms.ResponseStocks, error) {
	ret := _m.Called(ctx, sku)

	var r0 loms.ResponseStocks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (loms.ResponseStocks, error)); ok {
		return rf(ctx, sku)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) loms.ResponseStocks); ok {
		r0 = rf(ctx, sku)
	} else {
		r0 = ret.Get(0).(loms.ResponseStocks)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, sku)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LomsClient_Stocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stocks'
type LomsClient_Stocks_Call struct {
	*mock.Call
}

// Stocks is a helper method to define mock.On call
//   - ctx context.Context
//   - sku uint32
func (_e *LomsClient_Expecter) Stocks(ctx interface{}, sku interface{}) *LomsClient_Stocks_Call {
	return &LomsClient_Stocks_Call{Call: _e.mock.On("Stocks", ctx, sku)}
}

func (_c *LomsClient_Stocks_Call) Run(run func(ctx context.Context, sku uint32)) *LomsClient_Stocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32))
	})
	return _c
}

func (_c *LomsClient_Stocks_Call) Return(_a0 loms.ResponseStocks, _a1 error) *LomsClient_Stocks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LomsClient_Stocks_Call) RunAndReturn(run func(context.Context, uint32) (loms.ResponseStocks, error)) *LomsClient_Stocks_Call {
	_c.Call.Return(run)
	return _c
}

// NewLomsClient creates a new instance of LomsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLomsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *LomsClient {
	mock := &LomsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
