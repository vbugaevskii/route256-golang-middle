// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "route256/checkout/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// Impl is an autogenerated mock type for the Impl type
type Impl struct {
	mock.Mock
}

type Impl_Expecter struct {
	mock *mock.Mock
}

func (_m *Impl) EXPECT() *Impl_Expecter {
	return &Impl_Expecter{mock: &_m.Mock}
}

// AddToCart provides a mock function with given fields: ctx, user, sku, count
func (_m *Impl) AddToCart(ctx context.Context, user int64, sku uint32, count uint16) error {
	ret := _m.Called(ctx, user, sku, count)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, uint32, uint16) error); ok {
		r0 = rf(ctx, user, sku, count)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Impl_AddToCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToCart'
type Impl_AddToCart_Call struct {
	*mock.Call
}

// AddToCart is a helper method to define mock.On call
//   - ctx context.Context
//   - user int64
//   - sku uint32
//   - count uint16
func (_e *Impl_Expecter) AddToCart(ctx interface{}, user interface{}, sku interface{}, count interface{}) *Impl_AddToCart_Call {
	return &Impl_AddToCart_Call{Call: _e.mock.On("AddToCart", ctx, user, sku, count)}
}

func (_c *Impl_AddToCart_Call) Run(run func(ctx context.Context, user int64, sku uint32, count uint16)) *Impl_AddToCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(uint32), args[3].(uint16))
	})
	return _c
}

func (_c *Impl_AddToCart_Call) Return(_a0 error) *Impl_AddToCart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Impl_AddToCart_Call) RunAndReturn(run func(context.Context, int64, uint32, uint16) error) *Impl_AddToCart_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFromCart provides a mock function with given fields: ctx, user, sku, count
func (_m *Impl) DeleteFromCart(ctx context.Context, user int64, sku uint32, count uint16) error {
	ret := _m.Called(ctx, user, sku, count)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, uint32, uint16) error); ok {
		r0 = rf(ctx, user, sku, count)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Impl_DeleteFromCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFromCart'
type Impl_DeleteFromCart_Call struct {
	*mock.Call
}

// DeleteFromCart is a helper method to define mock.On call
//   - ctx context.Context
//   - user int64
//   - sku uint32
//   - count uint16
func (_e *Impl_Expecter) DeleteFromCart(ctx interface{}, user interface{}, sku interface{}, count interface{}) *Impl_DeleteFromCart_Call {
	return &Impl_DeleteFromCart_Call{Call: _e.mock.On("DeleteFromCart", ctx, user, sku, count)}
}

func (_c *Impl_DeleteFromCart_Call) Run(run func(ctx context.Context, user int64, sku uint32, count uint16)) *Impl_DeleteFromCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(uint32), args[3].(uint16))
	})
	return _c
}

func (_c *Impl_DeleteFromCart_Call) Return(_a0 error) *Impl_DeleteFromCart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Impl_DeleteFromCart_Call) RunAndReturn(run func(context.Context, int64, uint32, uint16) error) *Impl_DeleteFromCart_Call {
	_c.Call.Return(run)
	return _c
}

// ListCart provides a mock function with given fields: ctx, user
func (_m *Impl) ListCart(ctx context.Context, user int64) ([]*domain.CartItem, error) {
	ret := _m.Called(ctx, user)

	var r0 []*domain.CartItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*domain.CartItem, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*domain.CartItem); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.CartItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Impl_ListCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCart'
type Impl_ListCart_Call struct {
	*mock.Call
}

// ListCart is a helper method to define mock.On call
//   - ctx context.Context
//   - user int64
func (_e *Impl_Expecter) ListCart(ctx interface{}, user interface{}) *Impl_ListCart_Call {
	return &Impl_ListCart_Call{Call: _e.mock.On("ListCart", ctx, user)}
}

func (_c *Impl_ListCart_Call) Run(run func(ctx context.Context, user int64)) *Impl_ListCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Impl_ListCart_Call) Return(_a0 []*domain.CartItem, _a1 error) *Impl_ListCart_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Impl_ListCart_Call) RunAndReturn(run func(context.Context, int64) ([]*domain.CartItem, error)) *Impl_ListCart_Call {
	_c.Call.Return(run)
	return _c
}

// Purchase provides a mock function with given fields: ctx, user
func (_m *Impl) Purchase(ctx context.Context, user int64) (int64, error) {
	ret := _m.Called(ctx, user)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int64, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Impl_Purchase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Purchase'
type Impl_Purchase_Call struct {
	*mock.Call
}

// Purchase is a helper method to define mock.On call
//   - ctx context.Context
//   - user int64
func (_e *Impl_Expecter) Purchase(ctx interface{}, user interface{}) *Impl_Purchase_Call {
	return &Impl_Purchase_Call{Call: _e.mock.On("Purchase", ctx, user)}
}

func (_c *Impl_Purchase_Call) Run(run func(ctx context.Context, user int64)) *Impl_Purchase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Impl_Purchase_Call) Return(_a0 int64, _a1 error) *Impl_Purchase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Impl_Purchase_Call) RunAndReturn(run func(context.Context, int64) (int64, error)) *Impl_Purchase_Call {
	_c.Call.Return(run)
	return _c
}

// NewImpl creates a new instance of Impl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImpl(t interface {
	mock.TestingT
	Cleanup(func())
}) *Impl {
	mock := &Impl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
